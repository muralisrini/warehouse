// Code generated by protoc-gen-go.
// source: notify.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	notify.proto

It has these top-level messages:
	Client
	Notification
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// registring client
type Client struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}

// notification messages to client
type Notification struct {
	// The message to be sent.
	Tid     string `protobuf:"bytes,1,opt,name=tid" json:"tid,omitempty"`
	Blockid string `protobuf:"bytes,2,opt,name=blockid" json:"blockid,omitempty"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for EventNotify service

type EventNotifyClient interface {
	// Accepts a client and sends notifications
	Notifications(ctx context.Context, opts ...grpc.CallOption) (EventNotify_NotificationsClient, error)
}

type eventNotifyClient struct {
	cc *grpc.ClientConn
}

func NewEventNotifyClient(cc *grpc.ClientConn) EventNotifyClient {
	return &eventNotifyClient{cc}
}

func (c *eventNotifyClient) Notifications(ctx context.Context, opts ...grpc.CallOption) (EventNotify_NotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventNotify_serviceDesc.Streams[0], c.cc, "/protos.EventNotify/Notifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventNotifyNotificationsClient{stream}
	return x, nil
}

type EventNotify_NotificationsClient interface {
	Send(*Client) error
	Recv() (*Notification, error)
	grpc.ClientStream
}

type eventNotifyNotificationsClient struct {
	grpc.ClientStream
}

func (x *eventNotifyNotificationsClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventNotifyNotificationsClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventNotify service

type EventNotifyServer interface {
	// Accepts a client and sends notifications
	Notifications(EventNotify_NotificationsServer) error
}

func RegisterEventNotifyServer(s *grpc.Server, srv EventNotifyServer) {
	s.RegisterService(&_EventNotify_serviceDesc, srv)
}

func _EventNotify_Notifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventNotifyServer).Notifications(&eventNotifyNotificationsServer{stream})
}

type EventNotify_NotificationsServer interface {
	Send(*Notification) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type eventNotifyNotificationsServer struct {
	grpc.ServerStream
}

func (x *eventNotifyNotificationsServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventNotifyNotificationsServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventNotify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EventNotify",
	HandlerType: (*EventNotifyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notifications",
			Handler:       _EventNotify_Notifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
